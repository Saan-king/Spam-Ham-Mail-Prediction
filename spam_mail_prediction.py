# -*- coding: utf-8 -*-
"""Spam Mail Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j9A1pvH3ocuju96a-T63YtRl-MNBXyJ5

Import Libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

"""Data Preprocessing"""

#Load the dataset to pandas Data Frame

raw_mail_data=pd.read_csv('spamham.csv')
#replace null values with null string
mail_data=raw_mail_data.where((pd.notnull(raw_mail_data)), '')

mail_data.shape

mail_data.head() #sample_Data

#Label spam mail as 0 and non spam mail(ham) as 1
mail_data.loc[mail_data['Category']=='spam','Category',]=0
mail_data.loc[mail_data['Category']=='ham','Category']=1

#Separate the data as text and labels...X->TEXT,Y->LABEL
X = mail_data['Message']
Y = mail_data['Category']

print(X)
print('.............')
print(Y)

"""Train Test Split"""

#split the train data and test data
#training data set->construction of model 
#testing data set->evaluation of model

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.8, test_size=0.2, random_state=3)

"""Feature Extraction"""

# transform the text data to feature vectors that can be used as input to the SVM model using TfidfVectorizer
# convert the text to lower case letters
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase='True')
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

#convert Y_train and Y_test values as integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""Training the model -->Support Vector Machine (supervisied learning model)[segreate data into two lines]Hyperplane
useful for classification and regression...here we using classfication problem like spam or ham mails
Inour class spam mail on one side and ham mail on another side
"""

#training the support vector machine with training data

model=LinearSVC()
model.fit(X_train_features,Y_train)

Evaluation of the model

#prediction on training data

prediction_on_training_data=model.predict(X_train_features)
accuracy_on_training_data=accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy:',accuracy_on_training_data)

#prediction on test data

prediction_on_test_data=model.predict(X_test_features)
accuracy_on_test_data=accuracy_score(Y_test,prediction_on_test_data)

print('Accuracy:',accuracy_on_test_data)

input_mail = ["As per your request 'Melle Melle (Oru Minnaminunginte Nurungu Vettam)' has been set as your callertune for all Callers. Press *9 to copy your friends Callertune"]
# convert text to feature vectors
input_mail_features = feature_extraction.transform(input_mail)

#making prediction
prediction = model.predict(input_mail_features)
print(prediction)

if (prediction[0]==1):
  print('HAM MAIL')
else:
  print('SPAM MAIL')